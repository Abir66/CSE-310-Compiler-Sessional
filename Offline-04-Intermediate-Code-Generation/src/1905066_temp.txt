g PROC
	PUSH BP
	MOV BP, SP
	SUB SP, 2
	SUB SP, 2
L0:
	PUSH 0
	POP AX
	MOV [BP-4], AX
	PUSH AX
	POP AX
L1:
	MOV AX, [BP-4]
	PUSH AX
	PUSH 7
	POP BX
	POP AX
	CMP AX, BX
	JL 
	JMP 
	POP AX
L2:
	MOV AX, [BP-4]
	PUSH AX
	INC AX
	MOV [BP-4], AX
	POP AX
	JMP L1
L3:
	MOV AX, [BP-4]
	PUSH AX
	PUSH 3
	POP BX
	POP AX
	XOR DX, DX
	IDIV BX
	PUSH DX
	PUSH 0
	POP BX
	POP AX
	CMP AX, BX
	JE 
	JMP 
L4:
	MOV AX, [BP+6]
	PUSH AX
	PUSH 5
	POP BX
	POP AX
	ADD AX, BX
	PUSH AX
	POP AX
	MOV [BP+6], AX
	PUSH AX
	POP AX
	JMP 
L5:
	MOV AX, [BP+6]
	PUSH AX
	PUSH 1
	POP BX
	POP AX
	SUB AX, BX
	PUSH AX
	POP AX
	MOV [BP+6], AX
	PUSH AX
	POP AX
L6:
	MOV AX, [BP+6]
	CALL print_output
	CALL new_line
	JMP L2
L7:
	ADD SP, 4
	POP BP
	RET 4
g ENDP
main PROC
	MOV AX, @DATA
	MOV DS, AX
	PUSH BP
	MOV BP, SP
	PUSH 2
	PUSH 3
	CALL g
	PUSH 0
	POP AX
L8:
	PUSH 0
	POP AX
	JMP 
L9:
	ADD SP, 0
	POP BP
	MOV AX, 4CH
	INT 21H
main ENDP
