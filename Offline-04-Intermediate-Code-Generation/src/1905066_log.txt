Line# 2: Token <INT> Lexeme int found
type_specifier : INT
Line# 2: Token <ID> Lexeme main found
Line# 2: Token <LPAREN> Lexeme ( found
Line# 2: Token <RPAREN> Lexeme ) found
Line# 3: Token <LCURL> Lexeme { found
Line# 4: Token <INT> Lexeme int found
type_specifier : INT
Line# 4: Token <ID> Lexeme x found
Line# 4: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 4: Token <ID> Lexeme k found
Line# 4: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 6: Token <FOR> Lexeme for found
Line# 6: Token <LPAREN> Lexeme ( found
Line# 6: Token <ID> Lexeme x found
Line# 6: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 6: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
Line# 6: Token <ID> Lexeme x found
Line# 6: Token <RELOP> Lexeme > found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 6: Token <ADDOP> Lexeme - found
Line# 6: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
unary_expression : ADDOP unary_expression
term : unary_expression
Line# 6: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
Line# 6: Token <ID> Lexeme x found
Line# 6: Token <DECOP> Lexeme -- found
variable : ID
factor: variable DECOP
unary_expression : factor
term : unary_expression
Line# 6: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 6: Token <LCURL> Lexeme { found
Line# 8: Token <ID> Lexeme k found
Line# 8: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 8: Token <ID> Lexeme x found
Line# 8: Token <MULOP> Lexeme % found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
Line# 8: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 8: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statement
Line# 10: Token <IF> Lexeme if found
Line# 10: Token <LPAREN> Lexeme ( found
Line# 10: Token <ID> Lexeme k found
Line# 10: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 10: Token <LCURL> Lexeme { found
Line# 11: Token <PRINTLN> Lexeme println found
Line# 11: Token <LPAREN> Lexeme ( found
Line# 11: Token <ID> Lexeme x found
Line# 11: Token <RPAREN> Lexeme ) found
Line# 11: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 12: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 4
	ScopeTable# 3
	ScopeTable# 2
	9--> <k, INT> 
	11--> <x, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
statement : compound_statement
Line# 13: Token <RCURL> Lexeme } found
statement : IF LPAREN expression RPAREN statement
statements : statements statement
compound_statement : LCURL statements RCURL
	ScopeTable# 3
	ScopeTable# 2
	9--> <k, INT> 
	11--> <x, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
statement : compound_statement
statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement
statements : statements statement
Line# 15: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	9--> <k, INT> 
	11--> <x, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : unit
start : program
Total Lines: 15
Total Errors: 0
