Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 1: Token <ID> Lexeme b found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 1: Token <ID> Lexeme c found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
unit : var_declaration
program : unit
Line# 3: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 3: Token <ID> Lexeme func_a found
Line# 3: Token <LPAREN> Lexeme ( found
Line# 3: Token <RPAREN> Lexeme ) found
Line# 3: Token <LCURL> Lexeme { found
Line# 4: Token <ID> Lexeme a found
Line# 4: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 4: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 4: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statement
Line# 5: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	ScopeTable# 1
	1--> <c, INT> 
	10--> <a, INT> 
	11--> <b, INT> <func_a, FUNCTION, VOID> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
Line# 7: Token <VOID> Lexeme void found
type_specifier : VOID
Line# 7: Token <ID> Lexeme sum found
Line# 7: Token <LPAREN> Lexeme ( found
Line# 7: Token <INT> Lexeme int found
type_specifier : INT
Line# 7: Token <ID> Lexeme x found
parameter_list : type_specifier ID
Line# 7: Token <COMMA> Lexeme , found
Line# 7: Token <INT> Lexeme int found
type_specifier : INT
Line# 7: Token <ID> Lexeme y found
parameter_list : parameter_list COMMA type_specifier ID
Line# 7: Token <RPAREN> Lexeme ) found
Line# 7: Token <LCURL> Lexeme { found
Line# 8: Token <INT> Lexeme int found
type_specifier : INT
Line# 8: Token <ID> Lexeme r found
Line# 8: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 9: Token <ID> Lexeme r found
Line# 9: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 9: Token <CONST_INT> Lexeme 40 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 9: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 10: Token <ID> Lexeme b found
Line# 10: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 10: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 10: Token <MULOP> Lexeme * found
Line# 10: Token <ID> Lexeme x found
Line# 10: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : term MULOP unary_expression
simple_expression : term
Line# 10: Token <ID> Lexeme y found
Line# 10: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : simple_expression ADDOP term
Line# 10: Token <ID> Lexeme r found
Line# 10: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 11: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 3
	1--> <y, INT> 
	5--> <r, INT> 
	11--> <x, INT> 
	ScopeTable# 1
	1--> <c, INT> 
	2--> <sum, FUNCTION, VOID> 
	10--> <a, INT> 
	11--> <b, INT> <func_a, FUNCTION, VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 13: Token <INT> Lexeme int found
type_specifier : INT
Line# 13: Token <ID> Lexeme foo found
Line# 13: Token <LPAREN> Lexeme ( found
Line# 13: Token <INT> Lexeme int found
type_specifier : INT
Line# 13: Token <ID> Lexeme a found
parameter_list : type_specifier ID
Line# 13: Token <COMMA> Lexeme , found
Line# 13: Token <INT> Lexeme int found
type_specifier : INT
Line# 13: Token <ID> Lexeme b found
parameter_list : parameter_list COMMA type_specifier ID
Line# 13: Token <RPAREN> Lexeme ) found
Line# 13: Token <LCURL> Lexeme { found
Line# 14: Token <ID> Lexeme a found
Line# 14: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 14: Token <ID> Lexeme a found
Line# 14: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 14: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 14: Token <ADDOP> Lexeme + found
simple_expression : simple_expression ADDOP term
Line# 14: Token <ID> Lexeme b found
Line# 14: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statement
Line# 15: Token <RETURN> Lexeme return found
Line# 15: Token <ID> Lexeme a found
Line# 15: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 16: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 4
	10--> <a, INT> 
	11--> <b, INT> 
	ScopeTable# 1
	1--> <c, INT> 
	2--> <sum, FUNCTION, VOID> 
	6--> <foo, FUNCTION, INT> 
	10--> <a, INT> 
	11--> <b, INT> <func_a, FUNCTION, VOID> 
func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement
unit : func_definition
program : program unit
Line# 24: Token <INT> Lexeme int found
type_specifier : INT
Line# 24: Token <ID> Lexeme main found
Line# 24: Token <LPAREN> Lexeme ( found
Line# 24: Token <RPAREN> Lexeme ) found
Line# 24: Token <LCURL> Lexeme { found
Line# 25: Token <INT> Lexeme int found
type_specifier : INT
Line# 25: Token <ID> Lexeme i found
Line# 25: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 25: Token <ID> Lexeme j found
Line# 25: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 25: Token <ID> Lexeme l found
Line# 25: Token <LSQUARE> Lexeme [ found
Line# 25: Token <CONST_INT> Lexeme 10 found
Line# 25: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD
Line# 25: Token <COMMA> Lexeme , found
Line# 25: Token <ID> Lexeme k found
Line# 25: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 27: Token <ID> Lexeme i found
Line# 27: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 27: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 27: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 28: Token <ID> Lexeme j found
Line# 28: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 28: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 28: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 30: Token <ID> Lexeme k found
Line# 30: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 30: Token <ID> Lexeme foo found
Line# 30: Token <LPAREN> Lexeme ( found
Line# 30: Token <ID> Lexeme i found
Line# 30: Token <COMMA> Lexeme , found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 30: Token <ID> Lexeme j found
Line# 30: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 30: Token <ADDOP> Lexeme + found
simple_expression : term
Line# 30: Token <ID> Lexeme foo found
Line# 30: Token <LPAREN> Lexeme ( found
Line# 30: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 30: Token <COMMA> Lexeme , found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 30: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 30: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 30: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 31: Token <PRINTLN> Lexeme println found
Line# 31: Token <LPAREN> Lexeme ( found
Line# 31: Token <ID> Lexeme k found
Line# 31: Token <RPAREN> Lexeme ) found
Line# 31: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 33: Token <ID> Lexeme sum found
Line# 33: Token <LPAREN> Lexeme ( found
Line# 33: Token <ID> Lexeme i found
Line# 33: Token <COMMA> Lexeme , found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : logic_expression
Line# 33: Token <ID> Lexeme j found
Line# 33: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
arguments : arguments COMMA logic_expression
argument_list : arguments
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 33: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 34: Token <PRINTLN> Lexeme println found
Line# 34: Token <LPAREN> Lexeme ( found
Line# 34: Token <ID> Lexeme b found
Line# 34: Token <RPAREN> Lexeme ) found
Line# 34: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 37: Token <ID> Lexeme func_a found
Line# 37: Token <LPAREN> Lexeme ( found
Line# 37: Token <RPAREN> Lexeme ) found
argument_list : 
factor : ID LPAREN argument_list RPAREN
unary_expression : factor
term : unary_expression
Line# 37: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 38: Token <PRINTLN> Lexeme println found
Line# 38: Token <LPAREN> Lexeme ( found
Line# 38: Token <ID> Lexeme a found
Line# 38: Token <RPAREN> Lexeme ) found
Line# 38: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 43: Token <ID> Lexeme i found
Line# 43: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 43: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 43: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 44: Token <ID> Lexeme j found
Line# 44: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 44: Token <ID> Lexeme i found
Line# 44: Token <INCOP> Lexeme ++ found
variable : ID
factor: variable INCOP
unary_expression : factor
term : unary_expression
Line# 44: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 45: Token <PRINTLN> Lexeme println found
Line# 45: Token <LPAREN> Lexeme ( found
Line# 45: Token <ID> Lexeme i found
Line# 45: Token <RPAREN> Lexeme ) found
Line# 45: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 46: Token <PRINTLN> Lexeme println found
Line# 46: Token <LPAREN> Lexeme ( found
Line# 46: Token <ID> Lexeme j found
Line# 46: Token <RPAREN> Lexeme ) found
Line# 46: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 48: Token <ID> Lexeme j found
Line# 48: Token <DECOP> Lexeme -- found
variable : ID
factor: variable DECOP
unary_expression : factor
term : unary_expression
Line# 48: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 49: Token <PRINTLN> Lexeme println found
Line# 49: Token <LPAREN> Lexeme ( found
Line# 49: Token <ID> Lexeme j found
Line# 49: Token <RPAREN> Lexeme ) found
Line# 49: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 51: Token <ID> Lexeme i found
Line# 51: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 51: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 51: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 52: Token <ID> Lexeme j found
Line# 52: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 52: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 52: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 54: Token <ID> Lexeme k found
Line# 54: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 54: Token <ID> Lexeme i found
Line# 54: Token <RELOP> Lexeme < found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 54: Token <ID> Lexeme j found
Line# 54: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 55: Token <PRINTLN> Lexeme println found
Line# 55: Token <LPAREN> Lexeme ( found
Line# 55: Token <ID> Lexeme k found
Line# 55: Token <RPAREN> Lexeme ) found
Line# 55: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 57: Token <ID> Lexeme k found
Line# 57: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 57: Token <ID> Lexeme i found
Line# 57: Token <RELOP> Lexeme > found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 57: Token <ID> Lexeme j found
Line# 57: Token <SEMICOLON> Lexeme ; found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 58: Token <PRINTLN> Lexeme println found
Line# 58: Token <LPAREN> Lexeme ( found
Line# 58: Token <ID> Lexeme k found
Line# 58: Token <RPAREN> Lexeme ) found
Line# 58: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 61: Token <ID> Lexeme i found
Line# 61: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 61: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 61: Token <MULOP> Lexeme * found
Line# 61: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 61: Token <ADDOP> Lexeme - found
simple_expression : term
Line# 61: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 61: Token <MULOP> Lexeme * found
Line# 61: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 61: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 62: Token <PRINTLN> Lexeme println found
Line# 62: Token <LPAREN> Lexeme ( found
Line# 62: Token <ID> Lexeme i found
Line# 62: Token <RPAREN> Lexeme ) found
Line# 62: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 63: Token <ID> Lexeme j found
Line# 63: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 63: Token <ID> Lexeme i found
Line# 63: Token <MULOP> Lexeme / found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
Line# 63: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 63: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 64: Token <PRINTLN> Lexeme println found
Line# 64: Token <LPAREN> Lexeme ( found
Line# 64: Token <ID> Lexeme j found
Line# 64: Token <RPAREN> Lexeme ) found
Line# 64: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 65: Token <ID> Lexeme k found
Line# 65: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 65: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 65: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 66: Token <ID> Lexeme l found
Line# 66: Token <LSQUARE> Lexeme [ found
Line# 66: Token <ID> Lexeme k found
Line# 66: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 66: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 66: Token <RSQUARE> Lexeme ] found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LTHIRD expression RTHIRD
Line# 66: Token <ASSIGNOP> Lexeme = found
Line# 66: Token <ID> Lexeme i found
Line# 66: Token <MULOP> Lexeme / found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
Line# 66: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 66: Token <ADDOP> Lexeme + found
simple_expression : term
Line# 66: Token <CONST_INT> Lexeme 5 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 66: Token <MULOP> Lexeme * found
Line# 66: Token <CONST_INT> Lexeme 2 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 66: Token <ADDOP> Lexeme + found
simple_expression : simple_expression ADDOP term
Line# 66: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 66: Token <SEMICOLON> Lexeme ; found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 67: Token <ID> Lexeme k found
Line# 67: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 67: Token <ID> Lexeme l found
Line# 67: Token <LSQUARE> Lexeme [ found
Line# 67: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 67: Token <ADDOP> Lexeme + found
simple_expression : term
Line# 67: Token <ID> Lexeme k found
Line# 67: Token <ADDOP> Lexeme + found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : simple_expression ADDOP term
Line# 67: Token <CONST_INT> Lexeme 1 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 67: Token <RSQUARE> Lexeme ] found
simple_expression : simple_expression ADDOP term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
variable : ID LTHIRD expression RTHIRD
Line# 67: Token <SEMICOLON> Lexeme ; found
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 68: Token <PRINTLN> Lexeme println found
Line# 68: Token <LPAREN> Lexeme ( found
Line# 68: Token <ID> Lexeme k found
Line# 68: Token <RPAREN> Lexeme ) found
Line# 68: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 69: Token <ID> Lexeme k found
Line# 69: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 69: Token <ID> Lexeme k found
Line# 69: Token <MULOP> Lexeme % found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
Line# 69: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 69: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 70: Token <PRINTLN> Lexeme println found
Line# 70: Token <LPAREN> Lexeme ( found
Line# 70: Token <ID> Lexeme k found
Line# 70: Token <RPAREN> Lexeme ) found
Line# 70: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 71: Token <ID> Lexeme k found
Line# 71: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 71: Token <ID> Lexeme k found
Line# 71: Token <MULOP> Lexeme % found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
Line# 71: Token <CONST_INT> Lexeme 3 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 71: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 72: Token <PRINTLN> Lexeme println found
Line# 72: Token <LPAREN> Lexeme ( found
Line# 72: Token <ID> Lexeme k found
Line# 72: Token <RPAREN> Lexeme ) found
Line# 72: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 75: Token <RETURN> Lexeme return found
Line# 75: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 75: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 76: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 5
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	10--> <l, ARRAY, INT> 
	ScopeTable# 1
	1--> <c, INT> 
	2--> <sum, FUNCTION, VOID> <main, FUNCTION, INT> 
	6--> <foo, FUNCTION, INT> 
	10--> <a, INT> 
	11--> <b, INT> <func_a, FUNCTION, VOID> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
start : program
Total Lines: 76
Total Errors: 0
