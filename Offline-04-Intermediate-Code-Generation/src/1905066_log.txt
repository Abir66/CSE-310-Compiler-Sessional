Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme main found
Line# 1: Token <LPAREN> Lexeme ( found
Line# 1: Token <RPAREN> Lexeme ) found
Line# 1: Token <LCURL> Lexeme { found
Line# 2: Token <INT> Lexeme int found
type_specifier : INT
Line# 2: Token <ID> Lexeme x found
Line# 2: Token <SEMICOLON> Lexeme ; found
declaration_list : ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 3: Token <ID> Lexeme x found
Line# 3: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 3: Token <ADDOP> Lexeme - found
Line# 3: Token <CONST_INT> Lexeme 1250 found
factor : CONST_INT
unary_expression : factor
unary_expression : ADDOP unary_expression
term : unary_expression
Line# 3: Token <MULOP> Lexeme / found
Line# 3: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : term MULOP unary_expression
Line# 3: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 4: Token <PRINTLN> Lexeme println found
Line# 4: Token <LPAREN> Lexeme ( found
Line# 4: Token <ID> Lexeme x found
Line# 4: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 4: Token <SEMICOLON> Lexeme ; found
statements : statements statement
Line# 5: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	11--> <x, INT> 
	ScopeTable# 1
	2--> <main, FUNCTION, INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : unit
start : program
Total Lines: 5
Total Errors: 0
