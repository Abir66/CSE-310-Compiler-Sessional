Line# 1: Token <INT> Lexeme int found
type_specifier : INT
Line# 1: Token <ID> Lexeme a found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 1: Token <ID> Lexeme b found
Line# 1: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 1: Token <ID> Lexeme c found
Line# 1: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
unit : var_declaration
program : unit
Line# 19: Token <INT> Lexeme int found
type_specifier : INT
Line# 19: Token <ID> Lexeme main found
Line# 19: Token <LPAREN> Lexeme ( found
Line# 19: Token <RPAREN> Lexeme ) found
Line# 19: Token <LCURL> Lexeme { found
Line# 20: Token <INT> Lexeme int found
type_specifier : INT
Line# 20: Token <ID> Lexeme i found
Line# 20: Token <COMMA> Lexeme , found
declaration_list : ID
Line# 20: Token <ID> Lexeme j found
Line# 20: Token <COMMA> Lexeme , found
declaration_list : declaration_list COMMA ID
Line# 20: Token <ID> Lexeme l found
Line# 20: Token <LSQUARE> Lexeme [ found
Line# 20: Token <CONST_INT> Lexeme 10 found
Line# 20: Token <RSQUARE> Lexeme ] found
declaration_list : declaration_list COMMA ID LTHIRD CONST_INT RTHIRD
Line# 20: Token <COMMA> Lexeme , found
Line# 20: Token <ID> Lexeme k found
Line# 20: Token <SEMICOLON> Lexeme ; found
declaration_list : declaration_list COMMA ID
var_declaration : type_specifier declaration_list SEMICOLON
statement : var_declaration
statements : statement
Line# 22: Token <ID> Lexeme i found
Line# 22: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 22: Token <CONST_INT> Lexeme 7 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 22: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 23: Token <ID> Lexeme j found
Line# 23: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 23: Token <CONST_INT> Lexeme 6 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 23: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 25: Token <IF> Lexeme if found
Line# 25: Token <LPAREN> Lexeme ( found
Line# 25: Token <ID> Lexeme i found
Line# 25: Token <RELOP> Lexeme > found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 25: Token <ID> Lexeme j found
Line# 25: Token <RPAREN> Lexeme ) found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 25: Token <LCURL> Lexeme { found
Line# 26: Token <PRINTLN> Lexeme println found
Line# 26: Token <LPAREN> Lexeme ( found
Line# 26: Token <ID> Lexeme i found
Line# 26: Token <RPAREN> Lexeme ) found
Line# 26: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 27: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 3
	ScopeTable# 2
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	10--> <l, ARRAY, INT> 
	ScopeTable# 1
	1--> <c, INT> 
	2--> <main, FUNCTION, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
statement : compound_statement
Line# 28: Token <ELSE> Lexeme else found
Line# 28: Token <LCURL> Lexeme { found
Line# 29: Token <PRINTLN> Lexeme println found
Line# 29: Token <LPAREN> Lexeme ( found
Line# 29: Token <ID> Lexeme j found
Line# 29: Token <RPAREN> Lexeme ) found
Line# 29: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 30: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 4
	ScopeTable# 2
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	10--> <l, ARRAY, INT> 
	ScopeTable# 1
	1--> <c, INT> 
	2--> <main, FUNCTION, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
statement : compound_statement
statement : IF LPAREN expression RPAREN statement ELSE statement
statements : statements statement
Line# 32: Token <WHILE> Lexeme while found
Line# 32: Token <LPAREN> Lexeme ( found
Line# 32: Token <ID> Lexeme j found
Line# 32: Token <RELOP> Lexeme > found
variable : ID
factor : variable
unary_expression : factor
term : unary_expression
simple_expression : term
Line# 32: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 32: Token <RPAREN> Lexeme ) found
simple_expression : term
rel_expression : simple_expression RELOP simple_expression
logic_expression : rel_expression
expression : logic_expression
Line# 32: Token <LCURL> Lexeme { found
Line# 33: Token <PRINTLN> Lexeme println found
Line# 33: Token <LPAREN> Lexeme ( found
Line# 33: Token <ID> Lexeme j found
Line# 33: Token <RPAREN> Lexeme ) found
Line# 33: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statement
Line# 34: Token <ID> Lexeme j found
Line# 34: Token <DECOP> Lexeme -- found
variable : ID
factor: variable DECOP
unary_expression : factor
term : unary_expression
Line# 34: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 35: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 5
	ScopeTable# 2
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	10--> <l, ARRAY, INT> 
	ScopeTable# 1
	1--> <c, INT> 
	2--> <main, FUNCTION, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
statement : compound_statement
statement : WHILE LPAREN expression RPAREN statement
statements : statements statement
Line# 37: Token <ID> Lexeme k found
Line# 37: Token <ASSIGNOP> Lexeme = found
variable : ID
Line# 37: Token <CONST_INT> Lexeme 30 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 37: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : variable ASSIGNOP logic_expression
expression_statement : expression SEMICOLON
statement : expression statement
statements : statements statement
Line# 38: Token <PRINTLN> Lexeme println found
Line# 38: Token <LPAREN> Lexeme ( found
Line# 38: Token <ID> Lexeme k found
Line# 38: Token <RPAREN> Lexeme ) found
Line# 38: Token <SEMICOLON> Lexeme ; found
statement : PRINTLN LPAREN ID RPAREN SEMICOLON
statements : statements statement
Line# 86: Token <RETURN> Lexeme return found
Line# 86: Token <CONST_INT> Lexeme 0 found
factor : CONST_INT
unary_expression : factor
term : unary_expression
Line# 86: Token <SEMICOLON> Lexeme ; found
simple_expression : term
rel_expression : simple_expression
logic_expression : rel_expression
expression : logic_expression
statement : RETURN expression SEMICOLON
statements : statements statement
Line# 87: Token <RCURL> Lexeme } found
compound_statement : LCURL statements RCURL
	ScopeTable# 2
	7--> <i, INT> 
	8--> <j, INT> 
	9--> <k, INT> 
	10--> <l, ARRAY, INT> 
	ScopeTable# 1
	1--> <c, INT> 
	2--> <main, FUNCTION, INT> 
	10--> <a, INT> 
	11--> <b, INT> 
func_definition : type_specifier ID LPAREN RPAREN compound_statement
unit : func_definition
program : program unit
start : program
Total Lines: 87
Total Errors: 0
