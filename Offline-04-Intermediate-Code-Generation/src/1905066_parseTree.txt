start : program 	<Line: 2-15>
 program : unit 	<Line: 2-15>
  unit : func_definition 	<Line: 2-15>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-15>
    type_specifier : INT 	<Line: 2-2>
     INT : int	<Line: 2>
    ID : main	<Line: 2>
    LPAREN : (	<Line: 2>
    RPAREN : )	<Line: 2>
    compound_statement : LCURL statements RCURL 	<Line: 3-15>
     LCURL : {	<Line: 3>
     statements : statements statement 	<Line: 4-13>
      statements : statement 	<Line: 4-4>
       statement : var_declaration 	<Line: 4-4>
        var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
         type_specifier : INT 	<Line: 4-4>
          INT : int	<Line: 4>
         declaration_list : declaration_list COMMA ID 	<Line: 4-4>
          declaration_list : ID 	<Line: 4-4>
           ID : x	<Line: 4>
          COMMA : ,	<Line: 4>
          ID : k	<Line: 4>
         SEMICOLON : ;	<Line: 4>
      statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 	<Line: 6-13>
       FOR : for	<Line: 6>
       LPAREN : (	<Line: 6>
       expression_statement : expression SEMICOLON 	<Line: 6-6>
        expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
         variable : ID 	<Line: 6-6>
          ID : x	<Line: 6>
         ASSIGNOP : =	<Line: 6>
         logic_expression : rel_expression 	<Line: 6-6>
          rel_expression : simple_expression 	<Line: 6-6>
           simple_expression : term 	<Line: 6-6>
            term : unary_expression 	<Line: 6-6>
             unary_expression : factor 	<Line: 6-6>
              factor : CONST_INT 	<Line: 6-6>
               CONST_INT : 5	<Line: 6>
        SEMICOLON : ;	<Line: 6>
       expression_statement : expression SEMICOLON 	<Line: 6-6>
        expression : logic_expression 	<Line: 6-6>
         logic_expression : rel_expression 	<Line: 6-6>
          rel_expression : simple_expression RELOP simple_expression 	<Line: 6-6>
           simple_expression : term 	<Line: 6-6>
            term : unary_expression 	<Line: 6-6>
             unary_expression : factor 	<Line: 6-6>
              factor : variable 	<Line: 6-6>
               variable : ID 	<Line: 6-6>
                ID : x	<Line: 6>
           RELOP : >	<Line: 6>
           simple_expression : term 	<Line: 6-6>
            term : unary_expression 	<Line: 6-6>
             unary_expression : ADDOP unary_expression 	<Line: 6-6>
              ADDOP : -	<Line: 6>
              unary_expression : factor 	<Line: 6-6>
               factor : CONST_INT 	<Line: 6-6>
                CONST_INT : 2	<Line: 6>
        SEMICOLON : ;	<Line: 6>
       expression : logic_expression 	<Line: 6-6>
        logic_expression : rel_expression 	<Line: 6-6>
         rel_expression : simple_expression 	<Line: 6-6>
          simple_expression : term 	<Line: 6-6>
           term : unary_expression 	<Line: 6-6>
            unary_expression : factor 	<Line: 6-6>
             factor : variable DECOP 	<Line: 6-6>
              variable : ID 	<Line: 6-6>
               ID : x	<Line: 6>
              DECOP : --	<Line: 6>
       RPAREN : )	<Line: 6>
       statement : compound_statement 	<Line: 6-13>
        compound_statement : LCURL statements RCURL 	<Line: 6-13>
         LCURL : {	<Line: 6>
         statements : statements statement 	<Line: 8-12>
          statements : statement 	<Line: 8-8>
           statement : expression_statement 	<Line: 8-8>
            expression_statement : expression SEMICOLON 	<Line: 8-8>
             expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
              variable : ID 	<Line: 8-8>
               ID : k	<Line: 8>
              ASSIGNOP : =	<Line: 8>
              logic_expression : rel_expression 	<Line: 8-8>
               rel_expression : simple_expression 	<Line: 8-8>
                simple_expression : term 	<Line: 8-8>
                 term : term MULOP unary_expression 	<Line: 8-8>
                  term : unary_expression 	<Line: 8-8>
                   unary_expression : factor 	<Line: 8-8>
                    factor : variable 	<Line: 8-8>
                     variable : ID 	<Line: 8-8>
                      ID : x	<Line: 8>
                  MULOP : %	<Line: 8>
                  unary_expression : factor 	<Line: 8-8>
                   factor : CONST_INT 	<Line: 8-8>
                    CONST_INT : 2	<Line: 8>
             SEMICOLON : ;	<Line: 8>
          statement : IF LPAREN expression RPAREN statement 	<Line: 10-12>
           IF : if	<Line: 10>
           LPAREN : (	<Line: 10>
           expression : logic_expression 	<Line: 10-10>
            logic_expression : rel_expression 	<Line: 10-10>
             rel_expression : simple_expression 	<Line: 10-10>
              simple_expression : term 	<Line: 10-10>
               term : unary_expression 	<Line: 10-10>
                unary_expression : factor 	<Line: 10-10>
                 factor : variable 	<Line: 10-10>
                  variable : ID 	<Line: 10-10>
                   ID : k	<Line: 10>
           RPAREN : )	<Line: 10>
           statement : compound_statement 	<Line: 10-12>
            compound_statement : LCURL statements RCURL 	<Line: 10-12>
             LCURL : {	<Line: 10>
             statements : statement 	<Line: 11-11>
              statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 11-11>
               PRINTLN : println	<Line: 11>
               LPAREN : (	<Line: 11>
               ID : x	<Line: 11>
               RPAREN : )	<Line: 11>
               SEMICOLON : ;	<Line: 11>
             RCURL : }	<Line: 12>
         RCURL : }	<Line: 13>
     RCURL : }	<Line: 15>
