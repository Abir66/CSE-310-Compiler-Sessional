start : program 	<Line: 3-21>
 program : program unit 	<Line: 3-21>
  program : unit 	<Line: 3-15>
   unit : func_definition 	<Line: 3-15>
    func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 3-15>
     type_specifier : VOID 	<Line: 3-3>
      VOID : void	<Line: 3>
     ID : g	<Line: 3>
     LPAREN : (	<Line: 3>
     parameter_list : parameter_list COMMA type_specifier ID 	<Line: 3-3>
      parameter_list : type_specifier ID 	<Line: 3-3>
       type_specifier : INT 	<Line: 3-3>
        INT : int	<Line: 3>
       ID : a	<Line: 3>
      COMMA : ,	<Line: 3>
      type_specifier : INT 	<Line: 3-3>
       INT : int	<Line: 3>
      ID : b	<Line: 3>
     RPAREN : )	<Line: 3>
     compound_statement : LCURL statements RCURL 	<Line: 3-15>
      LCURL : {	<Line: 3>
      statements : statements statement 	<Line: 4-14>
       statements : statement 	<Line: 4-4>
        statement : var_declaration 	<Line: 4-4>
         var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
          type_specifier : INT 	<Line: 4-4>
           INT : int	<Line: 4>
          declaration_list : declaration_list COMMA ID 	<Line: 4-4>
           declaration_list : ID 	<Line: 4-4>
            ID : x	<Line: 4>
           COMMA : ,	<Line: 4>
           ID : i	<Line: 4>
          SEMICOLON : ;	<Line: 4>
       statement : FOR LPAREN expression_statement expression_statement expression RPAREN statement 	<Line: 6-14>
        FOR : for	<Line: 6>
        LPAREN : (	<Line: 6>
        expression_statement : expression SEMICOLON 	<Line: 6-6>
         expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
          variable : ID 	<Line: 6-6>
           ID : i	<Line: 6>
          ASSIGNOP : =	<Line: 6>
          logic_expression : rel_expression 	<Line: 6-6>
           rel_expression : simple_expression 	<Line: 6-6>
            simple_expression : term 	<Line: 6-6>
             term : unary_expression 	<Line: 6-6>
              unary_expression : factor 	<Line: 6-6>
               factor : CONST_INT 	<Line: 6-6>
                CONST_INT : 0	<Line: 6>
         SEMICOLON : ;	<Line: 6>
        expression_statement : expression SEMICOLON 	<Line: 6-6>
         expression : logic_expression 	<Line: 6-6>
          logic_expression : rel_expression 	<Line: 6-6>
           rel_expression : simple_expression RELOP simple_expression 	<Line: 6-6>
            simple_expression : term 	<Line: 6-6>
             term : unary_expression 	<Line: 6-6>
              unary_expression : factor 	<Line: 6-6>
               factor : variable 	<Line: 6-6>
                variable : ID 	<Line: 6-6>
                 ID : i	<Line: 6>
            RELOP : <	<Line: 6>
            simple_expression : term 	<Line: 6-6>
             term : unary_expression 	<Line: 6-6>
              unary_expression : factor 	<Line: 6-6>
               factor : CONST_INT 	<Line: 6-6>
                CONST_INT : 7	<Line: 6>
         SEMICOLON : ;	<Line: 6>
        expression : logic_expression 	<Line: 6-6>
         logic_expression : rel_expression 	<Line: 6-6>
          rel_expression : simple_expression 	<Line: 6-6>
           simple_expression : term 	<Line: 6-6>
            term : unary_expression 	<Line: 6-6>
             unary_expression : factor 	<Line: 6-6>
              factor : variable INCOP 	<Line: 6-6>
               variable : ID 	<Line: 6-6>
                ID : i	<Line: 6>
               INCOP : ++	<Line: 6>
        RPAREN : )	<Line: 6>
        statement : compound_statement 	<Line: 6-14>
         compound_statement : LCURL statements RCURL 	<Line: 6-14>
          LCURL : {	<Line: 6>
          statements : statements statement 	<Line: 7-13>
           statements : statement 	<Line: 7-12>
            statement : IF LPAREN expression RPAREN statement ELSE statement 	<Line: 7-12>
             IF : if	<Line: 7>
             LPAREN : (	<Line: 7>
             expression : logic_expression 	<Line: 7-7>
              logic_expression : rel_expression 	<Line: 7-7>
               rel_expression : simple_expression RELOP simple_expression 	<Line: 7-7>
                simple_expression : term 	<Line: 7-7>
                 term : term MULOP unary_expression 	<Line: 7-7>
                  term : unary_expression 	<Line: 7-7>
                   unary_expression : factor 	<Line: 7-7>
                    factor : variable 	<Line: 7-7>
                     variable : ID 	<Line: 7-7>
                      ID : i	<Line: 7>
                  MULOP : %	<Line: 7>
                  unary_expression : factor 	<Line: 7-7>
                   factor : CONST_INT 	<Line: 7-7>
                    CONST_INT : 3	<Line: 7>
                RELOP : ==	<Line: 7>
                simple_expression : term 	<Line: 7-7>
                 term : unary_expression 	<Line: 7-7>
                  unary_expression : factor 	<Line: 7-7>
                   factor : CONST_INT 	<Line: 7-7>
                    CONST_INT : 0	<Line: 7>
             RPAREN : )	<Line: 7>
             statement : compound_statement 	<Line: 7-9>
              compound_statement : LCURL statements RCURL 	<Line: 7-9>
               LCURL : {	<Line: 7>
               statements : statement 	<Line: 8-8>
                statement : expression_statement 	<Line: 8-8>
                 expression_statement : expression SEMICOLON 	<Line: 8-8>
                  expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
                   variable : ID 	<Line: 8-8>
                    ID : a	<Line: 8>
                   ASSIGNOP : =	<Line: 8>
                   logic_expression : rel_expression 	<Line: 8-8>
                    rel_expression : simple_expression 	<Line: 8-8>
                     simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                      simple_expression : term 	<Line: 8-8>
                       term : unary_expression 	<Line: 8-8>
                        unary_expression : factor 	<Line: 8-8>
                         factor : variable 	<Line: 8-8>
                          variable : ID 	<Line: 8-8>
                           ID : a	<Line: 8>
                      ADDOP : +	<Line: 8>
                      term : unary_expression 	<Line: 8-8>
                       unary_expression : factor 	<Line: 8-8>
                        factor : CONST_INT 	<Line: 8-8>
                         CONST_INT : 5	<Line: 8>
                  SEMICOLON : ;	<Line: 8>
               RCURL : }	<Line: 9>
             ELSE : else	<Line: 10>
             statement : compound_statement 	<Line: 10-12>
              compound_statement : LCURL statements RCURL 	<Line: 10-12>
               LCURL : {	<Line: 10>
               statements : statement 	<Line: 11-11>
                statement : expression_statement 	<Line: 11-11>
                 expression_statement : expression SEMICOLON 	<Line: 11-11>
                  expression : variable ASSIGNOP logic_expression 	<Line: 11-11>
                   variable : ID 	<Line: 11-11>
                    ID : a	<Line: 11>
                   ASSIGNOP : =	<Line: 11>
                   logic_expression : rel_expression 	<Line: 11-11>
                    rel_expression : simple_expression 	<Line: 11-11>
                     simple_expression : simple_expression ADDOP term 	<Line: 11-11>
                      simple_expression : term 	<Line: 11-11>
                       term : unary_expression 	<Line: 11-11>
                        unary_expression : factor 	<Line: 11-11>
                         factor : variable 	<Line: 11-11>
                          variable : ID 	<Line: 11-11>
                           ID : a	<Line: 11>
                      ADDOP : -	<Line: 11>
                      term : unary_expression 	<Line: 11-11>
                       unary_expression : factor 	<Line: 11-11>
                        factor : CONST_INT 	<Line: 11-11>
                         CONST_INT : 1	<Line: 11>
                  SEMICOLON : ;	<Line: 11>
               RCURL : }	<Line: 12>
           statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 13-13>
            PRINTLN : println	<Line: 13>
            LPAREN : (	<Line: 13>
            ID : a	<Line: 13>
            RPAREN : )	<Line: 13>
            SEMICOLON : ;	<Line: 13>
          RCURL : }	<Line: 14>
      RCURL : }	<Line: 15>
  unit : func_definition 	<Line: 17-21>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 17-21>
    type_specifier : INT 	<Line: 17-17>
     INT : int	<Line: 17>
    ID : main	<Line: 17>
    LPAREN : (	<Line: 17>
    RPAREN : )	<Line: 17>
    compound_statement : LCURL statements RCURL 	<Line: 18-21>
     LCURL : {	<Line: 18>
     statements : statements statement 	<Line: 19-20>
      statements : statement 	<Line: 19-19>
       statement : expression_statement 	<Line: 19-19>
        expression_statement : expression SEMICOLON 	<Line: 19-19>
         expression : logic_expression 	<Line: 19-19>
          logic_expression : rel_expression 	<Line: 19-19>
           rel_expression : simple_expression 	<Line: 19-19>
            simple_expression : term 	<Line: 19-19>
             term : unary_expression 	<Line: 19-19>
              unary_expression : factor 	<Line: 19-19>
               factor : ID LPAREN argument_list RPAREN 	<Line: 19-19>
                ID : g	<Line: 19>
                LPAREN : (	<Line: 19>
                argument_list : arguments 	<Line: 19-19>
                 arguments : arguments COMMA logic_expression 	<Line: 19-19>
                  arguments : logic_expression 	<Line: 19-19>
                   logic_expression : rel_expression 	<Line: 19-19>
                    rel_expression : simple_expression 	<Line: 19-19>
                     simple_expression : term 	<Line: 19-19>
                      term : unary_expression 	<Line: 19-19>
                       unary_expression : factor 	<Line: 19-19>
                        factor : CONST_INT 	<Line: 19-19>
                         CONST_INT : 2	<Line: 19>
                  COMMA : ,	<Line: 19>
                  logic_expression : rel_expression 	<Line: 19-19>
                   rel_expression : simple_expression 	<Line: 19-19>
                    simple_expression : term 	<Line: 19-19>
                     term : unary_expression 	<Line: 19-19>
                      unary_expression : factor 	<Line: 19-19>
                       factor : CONST_INT 	<Line: 19-19>
                        CONST_INT : 3	<Line: 19>
                RPAREN : )	<Line: 19>
         SEMICOLON : ;	<Line: 19>
      statement : RETURN expression SEMICOLON 	<Line: 20-20>
       RETURN : return	<Line: 20>
       expression : logic_expression 	<Line: 20-20>
        logic_expression : rel_expression 	<Line: 20-20>
         rel_expression : simple_expression 	<Line: 20-20>
          simple_expression : term 	<Line: 20-20>
           term : unary_expression 	<Line: 20-20>
            unary_expression : factor 	<Line: 20-20>
             factor : CONST_INT 	<Line: 20-20>
              CONST_INT : 0	<Line: 20>
       SEMICOLON : ;	<Line: 20>
     RCURL : }	<Line: 21>
