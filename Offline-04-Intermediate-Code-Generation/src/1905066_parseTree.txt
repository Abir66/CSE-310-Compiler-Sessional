start : program 	<Line: 1-118>
 program : program unit 	<Line: 1-118>
  program : program unit 	<Line: 1-10>
   program : unit 	<Line: 1-1>
    unit : var_declaration 	<Line: 1-1>
     var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
      type_specifier : INT 	<Line: 1-1>
       INT : int	<Line: 1>
      declaration_list : declaration_list COMMA ID 	<Line: 1-1>
       declaration_list : declaration_list COMMA ID 	<Line: 1-1>
        declaration_list : ID 	<Line: 1-1>
         ID : a	<Line: 1>
        COMMA : ,	<Line: 1>
        ID : b	<Line: 1>
       COMMA : ,	<Line: 1>
       ID : c	<Line: 1>
      SEMICOLON : ;	<Line: 1>
   unit : func_definition 	<Line: 3-10>
    func_definition : type_specifier ID LPAREN parameter_list RPAREN compound_statement 	<Line: 3-10>
     type_specifier : INT 	<Line: 3-3>
      INT : int	<Line: 3>
     ID : f	<Line: 3>
     LPAREN : (	<Line: 3>
     parameter_list : type_specifier ID 	<Line: 3-3>
      type_specifier : INT 	<Line: 3-3>
       INT : int	<Line: 3>
      ID : x	<Line: 3>
     RPAREN : )	<Line: 3>
     compound_statement : LCURL statements RCURL 	<Line: 3-10>
      LCURL : {	<Line: 3>
      statements : statements statement 	<Line: 4-9>
       statements : statements statement 	<Line: 4-0>
        statements : statement 	<Line: 4-4>
         statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 4-4>
          PRINTLN : println	<Line: 4>
          LPAREN : (	<Line: 4>
          ID : x	<Line: 4>
          RPAREN : )	<Line: 4>
          SEMICOLON : ;	<Line: 4>
        statement : IF LPAREN expression RPAREN  	<Line: 5-0>
         IF : if	<Line: 5>
         LPAREN : (	<Line: 5>
         expression : logic_expression 	<Line: 5-5>
          logic_expression : rel_expression 	<Line: 5-5>
           rel_expression : simple_expression RELOP simple_expression 	<Line: 5-5>
            simple_expression : term 	<Line: 5-5>
             term : unary_expression 	<Line: 5-5>
              unary_expression : factor 	<Line: 5-5>
               factor : variable 	<Line: 5-5>
                variable : ID 	<Line: 5-5>
                 ID : x	<Line: 5>
            RELOP : ==	<Line: 5>
            simple_expression : term 	<Line: 5-5>
             term : unary_expression 	<Line: 5-5>
              unary_expression : factor 	<Line: 5-5>
               factor : CONST_INT 	<Line: 5-5>
                CONST_INT : 1	<Line: 5>
         RPAREN : )	<Line: 5>
          : 	<Line: 0>
       statement : RETURN expression SEMICOLON 	<Line: 9-9>
        RETURN : return	<Line: 9>
        expression : logic_expression 	<Line: 9-9>
         logic_expression : rel_expression 	<Line: 9-9>
          rel_expression : simple_expression 	<Line: 9-9>
           simple_expression : simple_expression ADDOP term 	<Line: 9-9>
            simple_expression : term 	<Line: 9-9>
             term : unary_expression 	<Line: 9-9>
              unary_expression : factor 	<Line: 9-9>
               factor : variable 	<Line: 9-9>
                variable : ID 	<Line: 9-9>
                 ID : x	<Line: 9>
            ADDOP : +	<Line: 9>
            term : unary_expression 	<Line: 9-9>
             unary_expression : factor 	<Line: 9-9>
              factor : ID LPAREN argument_list RPAREN 	<Line: 9-9>
               ID : f	<Line: 9>
               LPAREN : (	<Line: 9>
               argument_list : arguments 	<Line: 9-9>
                arguments : logic_expression 	<Line: 9-9>
                 logic_expression : rel_expression 	<Line: 9-9>
                  rel_expression : simple_expression 	<Line: 9-9>
                   simple_expression : simple_expression ADDOP term 	<Line: 9-9>
                    simple_expression : term 	<Line: 9-9>
                     term : unary_expression 	<Line: 9-9>
                      unary_expression : factor 	<Line: 9-9>
                       factor : variable 	<Line: 9-9>
                        variable : ID 	<Line: 9-9>
                         ID : x	<Line: 9>
                    ADDOP : -	<Line: 9>
                    term : unary_expression 	<Line: 9-9>
                     unary_expression : factor 	<Line: 9-9>
                      factor : CONST_INT 	<Line: 9-9>
                       CONST_INT : 1	<Line: 9>
               RPAREN : )	<Line: 9>
        SEMICOLON : ;	<Line: 9>
      RCURL : }	<Line: 10>
  unit : func_definition 	<Line: 28-118>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 28-118>
    type_specifier : INT 	<Line: 28-28>
     INT : int	<Line: 28>
    ID : main	<Line: 28>
    LPAREN : (	<Line: 28>
    RPAREN : )	<Line: 28>
    compound_statement : LCURL statements RCURL 	<Line: 28-118>
     LCURL : {	<Line: 28>
     statements : statements statement 	<Line: 29-117>
      statements : statements statement 	<Line: 29-112>
       statements : statements statement 	<Line: 29-110>
        statements : statements statement 	<Line: 29-109>
         statements : statements statement 	<Line: 29-108>
          statements : statements statement 	<Line: 29-107>
           statements : statements statement 	<Line: 29-106>
            statements : statements statement 	<Line: 29-105>
             statements : statements statement 	<Line: 29-104>
              statements : statements statement 	<Line: 29-103>
               statements : statements statement 	<Line: 29-102>
                statements : statements statement 	<Line: 29-101>
                 statements : statements statement 	<Line: 29-100>
                  statements : statements statement 	<Line: 29-99>
                   statements : statements statement 	<Line: 29-96>
                    statements : statements statement 	<Line: 29-95>
                     statements : statements statement 	<Line: 29-93>
                      statements : statements statement 	<Line: 29-92>
                       statements : statements statement 	<Line: 29-90>
                        statements : statements statement 	<Line: 29-89>
                         statements : statements statement 	<Line: 29-32>
                          statements : statements statement 	<Line: 29-31>
                           statements : statement 	<Line: 29-29>
                            statement : var_declaration 	<Line: 29-29>
                             var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 29-29>
                              type_specifier : INT 	<Line: 29-29>
                               INT : int	<Line: 29>
                              declaration_list : declaration_list COMMA ID 	<Line: 29-29>
                               declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 29-29>
                                declaration_list : declaration_list COMMA ID 	<Line: 29-29>
                                 declaration_list : ID 	<Line: 29-29>
                                  ID : i	<Line: 29>
                                 COMMA : ,	<Line: 29>
                                 ID : j	<Line: 29>
                                COMMA : ,	<Line: 29>
                                ID : l	<Line: 29>
                                LSQUARE : [	<Line: 29>
                                CONST_INT : 10	<Line: 29>
                                RSQUARE : ]	<Line: 29>
                               COMMA : ,	<Line: 29>
                               ID : k	<Line: 29>
                              SEMICOLON : ;	<Line: 29>
                           statement : expression_statement 	<Line: 31-31>
                            expression_statement : expression SEMICOLON 	<Line: 31-31>
                             expression : variable ASSIGNOP logic_expression 	<Line: 31-31>
                              variable : ID 	<Line: 31-31>
                               ID : i	<Line: 31>
                              ASSIGNOP : =	<Line: 31>
                              logic_expression : rel_expression 	<Line: 31-31>
                               rel_expression : simple_expression 	<Line: 31-31>
                                simple_expression : term 	<Line: 31-31>
                                 term : unary_expression 	<Line: 31-31>
                                  unary_expression : factor 	<Line: 31-31>
                                   factor : ID LPAREN argument_list RPAREN 	<Line: 31-31>
                                    ID : f	<Line: 31>
                                    LPAREN : (	<Line: 31>
                                    argument_list : arguments 	<Line: 31-31>
                                     arguments : logic_expression 	<Line: 31-31>
                                      logic_expression : rel_expression 	<Line: 31-31>
                                       rel_expression : simple_expression 	<Line: 31-31>
                                        simple_expression : term 	<Line: 31-31>
                                         term : unary_expression 	<Line: 31-31>
                                          unary_expression : factor 	<Line: 31-31>
                                           factor : CONST_INT 	<Line: 31-31>
                                            CONST_INT : 5	<Line: 31>
                                    RPAREN : )	<Line: 31>
                             SEMICOLON : ;	<Line: 31>
                          statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 32-32>
                           PRINTLN : println	<Line: 32>
                           LPAREN : (	<Line: 32>
                           ID : i	<Line: 32>
                           RPAREN : )	<Line: 32>
                           SEMICOLON : ;	<Line: 32>
                         statement : expression_statement 	<Line: 89-89>
                          expression_statement : expression SEMICOLON 	<Line: 89-89>
                           expression : variable ASSIGNOP logic_expression 	<Line: 89-89>
                            variable : ID 	<Line: 89-89>
                             ID : i	<Line: 89>
                            ASSIGNOP : =	<Line: 89>
                            logic_expression : rel_expression 	<Line: 89-89>
                             rel_expression : simple_expression 	<Line: 89-89>
                              simple_expression : term 	<Line: 89-89>
                               term : unary_expression 	<Line: 89-89>
                                unary_expression : factor 	<Line: 89-89>
                                 factor : CONST_INT 	<Line: 89-89>
                                  CONST_INT : 5	<Line: 89>
                           SEMICOLON : ;	<Line: 89>
                        statement : expression_statement 	<Line: 90-90>
                         expression_statement : expression SEMICOLON 	<Line: 90-90>
                          expression : variable ASSIGNOP logic_expression 	<Line: 90-90>
                           variable : ID 	<Line: 90-90>
                            ID : j	<Line: 90>
                           ASSIGNOP : =	<Line: 90>
                           logic_expression : rel_expression 	<Line: 90-90>
                            rel_expression : simple_expression 	<Line: 90-90>
                             simple_expression : term 	<Line: 90-90>
                              term : unary_expression 	<Line: 90-90>
                               unary_expression : factor 	<Line: 90-90>
                                factor : CONST_INT 	<Line: 90-90>
                                 CONST_INT : 6	<Line: 90>
                          SEMICOLON : ;	<Line: 90>
                       statement : expression_statement 	<Line: 92-92>
                        expression_statement : expression SEMICOLON 	<Line: 92-92>
                         expression : variable ASSIGNOP logic_expression 	<Line: 92-0>
                          variable : ID 	<Line: 92-92>
                           ID : k	<Line: 92>
                          ASSIGNOP : =	<Line: 92>
                          logic_expression : rel_expression LOGICOP  	<Line: 92-0>
                           rel_expression : simple_expression RELOP simple_expression 	<Line: 92-92>
                            simple_expression : term 	<Line: 92-92>
                             term : unary_expression 	<Line: 92-92>
                              unary_expression : factor 	<Line: 92-92>
                               factor : variable 	<Line: 92-92>
                                variable : ID 	<Line: 92-92>
                                 ID : i	<Line: 92>
                            RELOP : <	<Line: 92>
                            simple_expression : term 	<Line: 92-92>
                             term : unary_expression 	<Line: 92-92>
                              unary_expression : factor 	<Line: 92-92>
                               factor : variable 	<Line: 92-92>
                                variable : ID 	<Line: 92-92>
                                 ID : j	<Line: 92>
                           LOGICOP : &&	<Line: 92>
                            : 	<Line: 0>
                         SEMICOLON : ;	<Line: 92>
                      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 93-93>
                       PRINTLN : println	<Line: 93>
                       LPAREN : (	<Line: 93>
                       ID : k	<Line: 93>
                       RPAREN : )	<Line: 93>
                       SEMICOLON : ;	<Line: 93>
                     statement : expression_statement 	<Line: 95-95>
                      expression_statement : expression SEMICOLON 	<Line: 95-95>
                       expression : variable ASSIGNOP logic_expression 	<Line: 95-0>
                        variable : ID 	<Line: 95-95>
                         ID : k	<Line: 95>
                        ASSIGNOP : =	<Line: 95>
                        logic_expression : rel_expression LOGICOP  	<Line: 95-0>
                         rel_expression : simple_expression RELOP simple_expression 	<Line: 95-95>
                          simple_expression : term 	<Line: 95-95>
                           term : unary_expression 	<Line: 95-95>
                            unary_expression : factor 	<Line: 95-95>
                             factor : variable 	<Line: 95-95>
                              variable : ID 	<Line: 95-95>
                               ID : i	<Line: 95>
                          RELOP : >	<Line: 95>
                          simple_expression : term 	<Line: 95-95>
                           term : unary_expression 	<Line: 95-95>
                            unary_expression : factor 	<Line: 95-95>
                             factor : variable 	<Line: 95-95>
                              variable : ID 	<Line: 95-95>
                               ID : j	<Line: 95>
                         LOGICOP : ||	<Line: 95>
                          : 	<Line: 0>
                       SEMICOLON : ;	<Line: 95>
                    statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 96-96>
                     PRINTLN : println	<Line: 96>
                     LPAREN : (	<Line: 96>
                     ID : k	<Line: 96>
                     RPAREN : )	<Line: 96>
                     SEMICOLON : ;	<Line: 96>
                   statement : expression_statement 	<Line: 99-99>
                    expression_statement : expression SEMICOLON 	<Line: 99-99>
                     expression : variable ASSIGNOP logic_expression 	<Line: 99-99>
                      variable : ID 	<Line: 99-99>
                       ID : i	<Line: 99>
                      ASSIGNOP : =	<Line: 99>
                      logic_expression : rel_expression 	<Line: 99-99>
                       rel_expression : simple_expression 	<Line: 99-99>
                        simple_expression : simple_expression ADDOP term 	<Line: 99-99>
                         simple_expression : term 	<Line: 99-99>
                          term : term MULOP unary_expression 	<Line: 99-99>
                           term : unary_expression 	<Line: 99-99>
                            unary_expression : factor 	<Line: 99-99>
                             factor : CONST_INT 	<Line: 99-99>
                              CONST_INT : 5	<Line: 99>
                           MULOP : *	<Line: 99>
                           unary_expression : factor 	<Line: 99-99>
                            factor : CONST_INT 	<Line: 99-99>
                             CONST_INT : 6	<Line: 99>
                         ADDOP : -	<Line: 99>
                         term : term MULOP unary_expression 	<Line: 99-99>
                          term : unary_expression 	<Line: 99-99>
                           unary_expression : factor 	<Line: 99-99>
                            factor : CONST_INT 	<Line: 99-99>
                             CONST_INT : 2	<Line: 99>
                          MULOP : *	<Line: 99>
                          unary_expression : factor 	<Line: 99-99>
                           factor : CONST_INT 	<Line: 99-99>
                            CONST_INT : 3	<Line: 99>
                     SEMICOLON : ;	<Line: 99>
                  statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 100-100>
                   PRINTLN : println	<Line: 100>
                   LPAREN : (	<Line: 100>
                   ID : i	<Line: 100>
                   RPAREN : )	<Line: 100>
                   SEMICOLON : ;	<Line: 100>
                 statement : expression_statement 	<Line: 101-101>
                  expression_statement : expression SEMICOLON 	<Line: 101-101>
                   expression : variable ASSIGNOP logic_expression 	<Line: 101-101>
                    variable : ID 	<Line: 101-101>
                     ID : j	<Line: 101>
                    ASSIGNOP : =	<Line: 101>
                    logic_expression : rel_expression 	<Line: 101-101>
                     rel_expression : simple_expression 	<Line: 101-101>
                      simple_expression : term 	<Line: 101-101>
                       term : term MULOP unary_expression 	<Line: 101-101>
                        term : unary_expression 	<Line: 101-101>
                         unary_expression : factor 	<Line: 101-101>
                          factor : variable 	<Line: 101-101>
                           variable : ID 	<Line: 101-101>
                            ID : i	<Line: 101>
                        MULOP : /	<Line: 101>
                        unary_expression : factor 	<Line: 101-101>
                         factor : CONST_INT 	<Line: 101-101>
                          CONST_INT : 2	<Line: 101>
                   SEMICOLON : ;	<Line: 101>
                statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 102-102>
                 PRINTLN : println	<Line: 102>
                 LPAREN : (	<Line: 102>
                 ID : j	<Line: 102>
                 RPAREN : )	<Line: 102>
                 SEMICOLON : ;	<Line: 102>
               statement : expression_statement 	<Line: 103-103>
                expression_statement : expression SEMICOLON 	<Line: 103-103>
                 expression : variable ASSIGNOP logic_expression 	<Line: 103-103>
                  variable : ID 	<Line: 103-103>
                   ID : k	<Line: 103>
                  ASSIGNOP : =	<Line: 103>
                  logic_expression : rel_expression 	<Line: 103-103>
                   rel_expression : simple_expression 	<Line: 103-103>
                    simple_expression : term 	<Line: 103-103>
                     term : unary_expression 	<Line: 103-103>
                      unary_expression : factor 	<Line: 103-103>
                       factor : CONST_INT 	<Line: 103-103>
                        CONST_INT : 1	<Line: 103>
                 SEMICOLON : ;	<Line: 103>
              statement : expression_statement 	<Line: 104-104>
               expression_statement : expression SEMICOLON 	<Line: 104-104>
                expression : variable ASSIGNOP logic_expression 	<Line: 104-104>
                 variable : ID LSQUARE expression RSQUARE 	<Line: 104-104>
                  ID : l	<Line: 104>
                  LSQUARE : [	<Line: 104>
                  expression : logic_expression 	<Line: 104-104>
                   logic_expression : rel_expression 	<Line: 104-104>
                    rel_expression : simple_expression 	<Line: 104-104>
                     simple_expression : simple_expression ADDOP term 	<Line: 104-104>
                      simple_expression : term 	<Line: 104-104>
                       term : unary_expression 	<Line: 104-104>
                        unary_expression : factor 	<Line: 104-104>
                         factor : variable 	<Line: 104-104>
                          variable : ID 	<Line: 104-104>
                           ID : k	<Line: 104>
                      ADDOP : +	<Line: 104>
                      term : unary_expression 	<Line: 104-104>
                       unary_expression : factor 	<Line: 104-104>
                        factor : CONST_INT 	<Line: 104-104>
                         CONST_INT : 2	<Line: 104>
                  RSQUARE : ]	<Line: 104>
                 ASSIGNOP : =	<Line: 104>
                 logic_expression : rel_expression 	<Line: 104-104>
                  rel_expression : simple_expression 	<Line: 104-104>
                   simple_expression : simple_expression ADDOP term 	<Line: 104-104>
                    simple_expression : simple_expression ADDOP term 	<Line: 104-104>
                     simple_expression : term 	<Line: 104-104>
                      term : term MULOP unary_expression 	<Line: 104-104>
                       term : unary_expression 	<Line: 104-104>
                        unary_expression : factor 	<Line: 104-104>
                         factor : variable 	<Line: 104-104>
                          variable : ID 	<Line: 104-104>
                           ID : i	<Line: 104>
                       MULOP : /	<Line: 104>
                       unary_expression : factor 	<Line: 104-104>
                        factor : CONST_INT 	<Line: 104-104>
                         CONST_INT : 3	<Line: 104>
                     ADDOP : +	<Line: 104>
                     term : term MULOP unary_expression 	<Line: 104-104>
                      term : unary_expression 	<Line: 104-104>
                       unary_expression : factor 	<Line: 104-104>
                        factor : CONST_INT 	<Line: 104-104>
                         CONST_INT : 5	<Line: 104>
                      MULOP : *	<Line: 104>
                      unary_expression : factor 	<Line: 104-104>
                       factor : CONST_INT 	<Line: 104-104>
                        CONST_INT : 2	<Line: 104>
                    ADDOP : +	<Line: 104>
                    term : unary_expression 	<Line: 104-104>
                     unary_expression : factor 	<Line: 104-104>
                      factor : CONST_INT 	<Line: 104-104>
                       CONST_INT : 1	<Line: 104>
                SEMICOLON : ;	<Line: 104>
             statement : expression_statement 	<Line: 105-105>
              expression_statement : expression SEMICOLON 	<Line: 105-105>
               expression : variable ASSIGNOP logic_expression 	<Line: 105-105>
                variable : ID 	<Line: 105-105>
                 ID : k	<Line: 105>
                ASSIGNOP : =	<Line: 105>
                logic_expression : rel_expression 	<Line: 105-105>
                 rel_expression : simple_expression 	<Line: 105-105>
                  simple_expression : term 	<Line: 105-105>
                   term : unary_expression 	<Line: 105-105>
                    unary_expression : factor 	<Line: 105-105>
                     factor : variable 	<Line: 105-105>
                      variable : ID LSQUARE expression RSQUARE 	<Line: 105-105>
                       ID : l	<Line: 105>
                       LSQUARE : [	<Line: 105>
                       expression : logic_expression 	<Line: 105-105>
                        logic_expression : rel_expression 	<Line: 105-105>
                         rel_expression : simple_expression 	<Line: 105-105>
                          simple_expression : simple_expression ADDOP term 	<Line: 105-105>
                           simple_expression : simple_expression ADDOP term 	<Line: 105-105>
                            simple_expression : term 	<Line: 105-105>
                             term : unary_expression 	<Line: 105-105>
                              unary_expression : factor 	<Line: 105-105>
                               factor : CONST_INT 	<Line: 105-105>
                                CONST_INT : 1	<Line: 105>
                            ADDOP : +	<Line: 105>
                            term : unary_expression 	<Line: 105-105>
                             unary_expression : factor 	<Line: 105-105>
                              factor : variable 	<Line: 105-105>
                               variable : ID 	<Line: 105-105>
                                ID : k	<Line: 105>
                           ADDOP : +	<Line: 105>
                           term : unary_expression 	<Line: 105-105>
                            unary_expression : factor 	<Line: 105-105>
                             factor : CONST_INT 	<Line: 105-105>
                              CONST_INT : 1	<Line: 105>
                       RSQUARE : ]	<Line: 105>
               SEMICOLON : ;	<Line: 105>
            statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 106-106>
             PRINTLN : println	<Line: 106>
             LPAREN : (	<Line: 106>
             ID : k	<Line: 106>
             RPAREN : )	<Line: 106>
             SEMICOLON : ;	<Line: 106>
           statement : expression_statement 	<Line: 107-107>
            expression_statement : expression SEMICOLON 	<Line: 107-107>
             expression : variable ASSIGNOP logic_expression 	<Line: 107-107>
              variable : ID 	<Line: 107-107>
               ID : k	<Line: 107>
              ASSIGNOP : =	<Line: 107>
              logic_expression : rel_expression 	<Line: 107-107>
               rel_expression : simple_expression 	<Line: 107-107>
                simple_expression : term 	<Line: 107-107>
                 term : term MULOP unary_expression 	<Line: 107-107>
                  term : unary_expression 	<Line: 107-107>
                   unary_expression : factor 	<Line: 107-107>
                    factor : variable 	<Line: 107-107>
                     variable : ID 	<Line: 107-107>
                      ID : k	<Line: 107>
                  MULOP : %	<Line: 107>
                  unary_expression : factor 	<Line: 107-107>
                   factor : CONST_INT 	<Line: 107-107>
                    CONST_INT : 3	<Line: 107>
             SEMICOLON : ;	<Line: 107>
          statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 108-108>
           PRINTLN : println	<Line: 108>
           LPAREN : (	<Line: 108>
           ID : k	<Line: 108>
           RPAREN : )	<Line: 108>
           SEMICOLON : ;	<Line: 108>
         statement : expression_statement 	<Line: 109-109>
          expression_statement : expression SEMICOLON 	<Line: 109-109>
           expression : variable ASSIGNOP logic_expression 	<Line: 109-109>
            variable : ID 	<Line: 109-109>
             ID : k	<Line: 109>
            ASSIGNOP : =	<Line: 109>
            logic_expression : rel_expression 	<Line: 109-109>
             rel_expression : simple_expression 	<Line: 109-109>
              simple_expression : term 	<Line: 109-109>
               term : term MULOP unary_expression 	<Line: 109-109>
                term : unary_expression 	<Line: 109-109>
                 unary_expression : factor 	<Line: 109-109>
                  factor : variable 	<Line: 109-109>
                   variable : ID 	<Line: 109-109>
                    ID : k	<Line: 109>
                MULOP : %	<Line: 109>
                unary_expression : factor 	<Line: 109-109>
                 factor : CONST_INT 	<Line: 109-109>
                  CONST_INT : 3	<Line: 109>
           SEMICOLON : ;	<Line: 109>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 110-110>
         PRINTLN : println	<Line: 110>
         LPAREN : (	<Line: 110>
         ID : k	<Line: 110>
         RPAREN : )	<Line: 110>
         SEMICOLON : ;	<Line: 110>
       statement : FOR LPAREN expression_statement  expression_statement  expression 	<Line: 112-112>
        FOR : for	<Line: 112>
        LPAREN : (	<Line: 112>
        expression_statement : expression SEMICOLON 	<Line: 112-112>
         expression : variable ASSIGNOP logic_expression 	<Line: 112-112>
          variable : ID 	<Line: 112-112>
           ID : k	<Line: 112>
          ASSIGNOP : =	<Line: 112>
          logic_expression : rel_expression 	<Line: 112-112>
           rel_expression : simple_expression 	<Line: 112-112>
            simple_expression : term 	<Line: 112-112>
             term : unary_expression 	<Line: 112-112>
              unary_expression : factor 	<Line: 112-112>
               factor : CONST_INT 	<Line: 112-112>
                CONST_INT : 100	<Line: 112>
         SEMICOLON : ;	<Line: 112>
         : 	<Line: 0>
        expression_statement : expression SEMICOLON 	<Line: 112-112>
         expression : logic_expression 	<Line: 112-112>
          logic_expression : rel_expression 	<Line: 112-112>
           rel_expression : simple_expression RELOP simple_expression 	<Line: 112-112>
            simple_expression : term 	<Line: 112-112>
             term : unary_expression 	<Line: 112-112>
              unary_expression : factor 	<Line: 112-112>
               factor : variable 	<Line: 112-112>
                variable : ID 	<Line: 112-112>
                 ID : k	<Line: 112>
            RELOP : >	<Line: 112>
            simple_expression : term 	<Line: 112-112>
             term : unary_expression 	<Line: 112-112>
              unary_expression : factor 	<Line: 112-112>
               factor : CONST_INT 	<Line: 112-112>
                CONST_INT : 0	<Line: 112>
         SEMICOLON : ;	<Line: 112>
         : 	<Line: 0>
        expression : logic_expression 	<Line: 112-112>
         logic_expression : rel_expression 	<Line: 112-112>
          rel_expression : simple_expression 	<Line: 112-112>
           simple_expression : term 	<Line: 112-112>
            term : unary_expression 	<Line: 112-112>
             unary_expression : factor 	<Line: 112-112>
              factor : variable DECOP 	<Line: 112-112>
               variable : ID 	<Line: 112-112>
                ID : k	<Line: 112>
               DECOP : --	<Line: 112>
      statement : RETURN expression SEMICOLON 	<Line: 117-117>
       RETURN : return	<Line: 117>
       expression : logic_expression 	<Line: 117-117>
        logic_expression : rel_expression 	<Line: 117-117>
         rel_expression : simple_expression 	<Line: 117-117>
          simple_expression : term 	<Line: 117-117>
           term : unary_expression 	<Line: 117-117>
            unary_expression : factor 	<Line: 117-117>
             factor : CONST_INT 	<Line: 117-117>
              CONST_INT : 0	<Line: 117>
       SEMICOLON : ;	<Line: 117>
     RCURL : }	<Line: 118>
