start : program 	<Line: 1-16>
 program : program unit 	<Line: 1-16>
  program : unit 	<Line: 1-1>
   unit : var_declaration 	<Line: 1-1>
    var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 1-1>
     type_specifier : INT 	<Line: 1-1>
      INT : int	<Line: 1>
     declaration_list : declaration_list COMMA ID 	<Line: 1-1>
      declaration_list : ID 	<Line: 1-1>
       ID : a	<Line: 1>
      COMMA : ,	<Line: 1>
      ID : b	<Line: 1>
     SEMICOLON : ;	<Line: 1>
  unit : func_definition 	<Line: 3-16>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 3-16>
    type_specifier : INT 	<Line: 3-3>
     INT : int	<Line: 3>
    ID : main	<Line: 3>
    LPAREN : (	<Line: 3>
    RPAREN : )	<Line: 3>
    compound_statement : LCURL statements RCURL 	<Line: 3-16>
     LCURL : {	<Line: 3>
     statements : statements statement 	<Line: 4-15>
      statements : statements statement 	<Line: 4-10>
       statements : statements statement 	<Line: 4-9>
        statements : statements statement 	<Line: 4-8>
         statements : statements statement 	<Line: 4-7>
          statements : statements statement 	<Line: 4-6>
           statements : statement 	<Line: 4-4>
            statement : var_declaration 	<Line: 4-4>
             var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
              type_specifier : INT 	<Line: 4-4>
               INT : int	<Line: 4>
              declaration_list : declaration_list COMMA ID 	<Line: 4-4>
               declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 4-4>
                declaration_list : declaration_list COMMA ID 	<Line: 4-4>
                 declaration_list : ID 	<Line: 4-4>
                  ID : i	<Line: 4>
                 COMMA : ,	<Line: 4>
                 ID : j	<Line: 4>
                COMMA : ,	<Line: 4>
                ID : l	<Line: 4>
                LSQUARE : [	<Line: 4>
                CONST_INT : 10	<Line: 4>
                RSQUARE : ]	<Line: 4>
               COMMA : ,	<Line: 4>
               ID : k	<Line: 4>
              SEMICOLON : ;	<Line: 4>
           statement : expression_statement 	<Line: 6-6>
            expression_statement : expression SEMICOLON 	<Line: 6-6>
             expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
              variable : ID 	<Line: 6-6>
               ID : i	<Line: 6>
              ASSIGNOP : =	<Line: 6>
              logic_expression : rel_expression 	<Line: 6-6>
               rel_expression : simple_expression 	<Line: 6-6>
                simple_expression : term 	<Line: 6-6>
                 term : unary_expression 	<Line: 6-6>
                  unary_expression : factor 	<Line: 6-6>
                   factor : CONST_INT 	<Line: 6-6>
                    CONST_INT : 5	<Line: 6>
             SEMICOLON : ;	<Line: 6>
          statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 7-7>
           PRINTLN : println	<Line: 7>
           LPAREN : (	<Line: 7>
           ID : i	<Line: 7>
           RPAREN : )	<Line: 7>
           SEMICOLON : ;	<Line: 7>
         statement : expression_statement 	<Line: 8-8>
          expression_statement : expression SEMICOLON 	<Line: 8-8>
           expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
            variable : ID LSQUARE expression RSQUARE 	<Line: 8-8>
             ID : l	<Line: 8>
             LSQUARE : [	<Line: 8>
             expression : logic_expression 	<Line: 8-8>
              logic_expression : rel_expression 	<Line: 8-8>
               rel_expression : simple_expression 	<Line: 8-8>
                simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                 simple_expression : term 	<Line: 8-8>
                  term : unary_expression 	<Line: 8-8>
                   unary_expression : factor 	<Line: 8-8>
                    factor : CONST_INT 	<Line: 8-8>
                     CONST_INT : 2	<Line: 8>
                 ADDOP : +	<Line: 8>
                 term : unary_expression 	<Line: 8-8>
                  unary_expression : factor 	<Line: 8-8>
                   factor : variable 	<Line: 8-8>
                    variable : ID 	<Line: 8-8>
                     ID : i	<Line: 8>
             RSQUARE : ]	<Line: 8>
            ASSIGNOP : =	<Line: 8>
            logic_expression : rel_expression 	<Line: 8-8>
             rel_expression : simple_expression 	<Line: 8-8>
              simple_expression : term 	<Line: 8-8>
               term : unary_expression 	<Line: 8-8>
                unary_expression : factor 	<Line: 8-8>
                 factor : CONST_INT 	<Line: 8-8>
                  CONST_INT : 9	<Line: 8>
           SEMICOLON : ;	<Line: 8>
        statement : expression_statement 	<Line: 9-9>
         expression_statement : expression SEMICOLON 	<Line: 9-9>
          expression : variable ASSIGNOP logic_expression 	<Line: 9-9>
           variable : ID 	<Line: 9-9>
            ID : k	<Line: 9>
           ASSIGNOP : =	<Line: 9>
           logic_expression : rel_expression 	<Line: 9-9>
            rel_expression : simple_expression 	<Line: 9-9>
             simple_expression : simple_expression ADDOP term 	<Line: 9-9>
              simple_expression : term 	<Line: 9-9>
               term : unary_expression 	<Line: 9-9>
                unary_expression : factor 	<Line: 9-9>
                 factor : variable 	<Line: 9-9>
                  variable : ID LSQUARE expression RSQUARE 	<Line: 9-9>
                   ID : l	<Line: 9>
                   LSQUARE : [	<Line: 9>
                   expression : logic_expression 	<Line: 9-9>
                    logic_expression : rel_expression 	<Line: 9-9>
                     rel_expression : simple_expression 	<Line: 9-9>
                      simple_expression : simple_expression ADDOP term 	<Line: 9-9>
                       simple_expression : simple_expression ADDOP term 	<Line: 9-9>
                        simple_expression : term 	<Line: 9-9>
                         term : unary_expression 	<Line: 9-9>
                          unary_expression : factor 	<Line: 9-9>
                           factor : CONST_INT 	<Line: 9-9>
                            CONST_INT : 1	<Line: 9>
                        ADDOP : +	<Line: 9>
                        term : unary_expression 	<Line: 9-9>
                         unary_expression : factor 	<Line: 9-9>
                          factor : variable 	<Line: 9-9>
                           variable : ID 	<Line: 9-9>
                            ID : i	<Line: 9>
                       ADDOP : +	<Line: 9>
                       term : unary_expression 	<Line: 9-9>
                        unary_expression : factor 	<Line: 9-9>
                         factor : CONST_INT 	<Line: 9-9>
                          CONST_INT : 1	<Line: 9>
                   RSQUARE : ]	<Line: 9>
              ADDOP : +	<Line: 9>
              term : unary_expression 	<Line: 9-9>
               unary_expression : factor 	<Line: 9-9>
                factor : CONST_INT 	<Line: 9-9>
                 CONST_INT : 5	<Line: 9>
          SEMICOLON : ;	<Line: 9>
       statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 10-10>
        PRINTLN : println	<Line: 10>
        LPAREN : (	<Line: 10>
        ID : k	<Line: 10>
        RPAREN : )	<Line: 10>
        SEMICOLON : ;	<Line: 10>
      statement : RETURN expression SEMICOLON 	<Line: 15-15>
       RETURN : return	<Line: 15>
       expression : logic_expression 	<Line: 15-15>
        logic_expression : rel_expression 	<Line: 15-15>
         rel_expression : simple_expression 	<Line: 15-15>
          simple_expression : term 	<Line: 15-15>
           term : unary_expression 	<Line: 15-15>
            unary_expression : factor 	<Line: 15-15>
             factor : CONST_INT 	<Line: 15-15>
              CONST_INT : 0	<Line: 15>
       SEMICOLON : ;	<Line: 15>
     RCURL : }	<Line: 16>
