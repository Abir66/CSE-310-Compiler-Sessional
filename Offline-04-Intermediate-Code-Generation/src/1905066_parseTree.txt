start : program 	<Line: 1-5>
 program : unit 	<Line: 1-5>
  unit : func_definition 	<Line: 1-5>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 1-5>
    type_specifier : INT 	<Line: 1-1>
     INT : int	<Line: 1>
    ID : main	<Line: 1>
    LPAREN : (	<Line: 1>
    RPAREN : )	<Line: 1>
    compound_statement : LCURL statements RCURL 	<Line: 1-5>
     LCURL : {	<Line: 1>
     statements : statements statement 	<Line: 2-4>
      statements : statements statement 	<Line: 2-3>
       statements : statement 	<Line: 2-2>
        statement : var_declaration 	<Line: 2-2>
         var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 2-2>
          type_specifier : INT 	<Line: 2-2>
           INT : int	<Line: 2>
          declaration_list : ID 	<Line: 2-2>
           ID : x	<Line: 2>
          SEMICOLON : ;	<Line: 2>
       statement : expression_statement 	<Line: 3-3>
        expression_statement : expression SEMICOLON 	<Line: 3-3>
         expression : variable ASSIGNOP logic_expression 	<Line: 3-3>
          variable : ID 	<Line: 3-3>
           ID : x	<Line: 3>
          ASSIGNOP : =	<Line: 3>
          logic_expression : rel_expression 	<Line: 3-3>
           rel_expression : simple_expression 	<Line: 3-3>
            simple_expression : term 	<Line: 3-3>
             term : term MULOP unary_expression 	<Line: 3-3>
              term : unary_expression 	<Line: 3-3>
               unary_expression : ADDOP unary_expression 	<Line: 3-3>
                ADDOP : -	<Line: 3>
                unary_expression : factor 	<Line: 3-3>
                 factor : CONST_INT 	<Line: 3-3>
                  CONST_INT : 1250	<Line: 3>
              MULOP : /	<Line: 3>
              unary_expression : factor 	<Line: 3-3>
               factor : CONST_INT 	<Line: 3-3>
                CONST_INT : 7	<Line: 3>
         SEMICOLON : ;	<Line: 3>
      statement : PRINTLN LPAREN expression RPAREN SEMICOLON 	<Line: 4-4>
       PRINTLN : println	<Line: 4>
       LPAREN : (	<Line: 4>
       expression : logic_expression 	<Line: 4-4>
        logic_expression : rel_expression 	<Line: 4-4>
         rel_expression : simple_expression 	<Line: 4-4>
          simple_expression : term 	<Line: 4-4>
           term : unary_expression 	<Line: 4-4>
            unary_expression : factor 	<Line: 4-4>
             factor : variable 	<Line: 4-4>
              variable : ID 	<Line: 4-4>
               ID : x	<Line: 4>
       RPAREN : )	<Line: 4>
       SEMICOLON : ;	<Line: 4>
     RCURL : }	<Line: 5>
