start : program 	<Line: 2-15>
 program : unit 	<Line: 2-15>
  unit : func_definition 	<Line: 2-15>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 2-15>
    type_specifier : INT 	<Line: 2-2>
     INT : int	<Line: 2>
    ID : main	<Line: 2>
    LPAREN : (	<Line: 2>
    RPAREN : )	<Line: 2>
    compound_statement : LCURL statements RCURL 	<Line: 3-15>
     LCURL : {	<Line: 3>
     statements : statements statement 	<Line: 4-13>
      statements : statements non-terminal 	<Line: 4-0>
       statements : statements statement 	<Line: 4-11>
        statements : statements non-terminal 	<Line: 4-0>
         statements : statements non-terminal 	<Line: 4-0>
          statements : statements non-terminal 	<Line: 4-0>
           statements : statements non-terminal 	<Line: 4-0>
            statements : statements statement 	<Line: 4-6>
             statements : statements statement 	<Line: 4-5>
              statements : statement 	<Line: 4-4>
               statement : var_declaration 	<Line: 4-4>
                var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 4-4>
                 type_specifier : INT 	<Line: 4-4>
                  INT : int	<Line: 4>
                 declaration_list : declaration_list COMMA ID LSQUARE CONST_INT RSQUARE 	<Line: 4-4>
                  declaration_list : ID 	<Line: 4-4>
                   ID : x	<Line: 4>
                  COMMA : ,	<Line: 4>
                  ID : ara	<Line: 4>
                  LSQUARE : [	<Line: 4>
                  CONST_INT : 3	<Line: 4>
                  RSQUARE : ]	<Line: 4>
                 SEMICOLON : ;	<Line: 4>
              statement : expression_statement 	<Line: 5-5>
               expression_statement : expression SEMICOLON 	<Line: 5-5>
                expression : variable ASSIGNOP logic_expression 	<Line: 5-5>
                 variable : ID LSQUARE expression RSQUARE 	<Line: 5-5>
                  ID : ara	<Line: 5>
                  LSQUARE : [	<Line: 5>
                  expression : logic_expression 	<Line: 5-5>
                   logic_expression : rel_expression 	<Line: 5-5>
                    rel_expression : simple_expression 	<Line: 5-5>
                     simple_expression : term 	<Line: 5-5>
                      term : unary_expression 	<Line: 5-5>
                       unary_expression : factor 	<Line: 5-5>
                        factor : CONST_INT 	<Line: 5-5>
                         CONST_INT : 0	<Line: 5>
                  RSQUARE : ]	<Line: 5>
                 ASSIGNOP : =	<Line: 5>
                 logic_expression : rel_expression 	<Line: 5-5>
                  rel_expression : simple_expression 	<Line: 5-5>
                   simple_expression : term 	<Line: 5-5>
                    term : unary_expression 	<Line: 5-5>
                     unary_expression : factor 	<Line: 5-5>
                      factor : CONST_INT 	<Line: 5-5>
                       CONST_INT : 5	<Line: 5>
                SEMICOLON : ;	<Line: 5>
             statement : expression_statement 	<Line: 6-6>
              expression_statement : expression SEMICOLON 	<Line: 6-6>
               expression : variable ASSIGNOP logic_expression 	<Line: 6-6>
                variable : ID 	<Line: 6-6>
                 ID : x	<Line: 6>
                ASSIGNOP : =	<Line: 6>
                logic_expression : rel_expression 	<Line: 6-6>
                 rel_expression : simple_expression 	<Line: 6-6>
                  simple_expression : term 	<Line: 6-6>
                   term : unary_expression 	<Line: 6-6>
                    unary_expression : factor 	<Line: 6-6>
                     factor : CONST_INT 	<Line: 6-6>
                      CONST_INT : 2	<Line: 6>
               SEMICOLON : ;	<Line: 6>
            non-terminal : statement	<Line: 0>
           non-terminal : statement	<Line: 0>
          non-terminal : statement	<Line: 0>
         non-terminal : statement	<Line: 0>
        statement : expression_statement 	<Line: 11-11>
         expression_statement : expression SEMICOLON 	<Line: 11-11>
          expression : variable ASSIGNOP logic_expression 	<Line: 11-11>
           variable : ID 	<Line: 11-11>
            ID : x	<Line: 11>
           ASSIGNOP : =	<Line: 11>
           logic_expression : rel_expression 	<Line: 11-11>
            rel_expression : simple_expression 	<Line: 11-11>
             simple_expression : term 	<Line: 11-11>
              term : unary_expression 	<Line: 11-11>
               unary_expression : factor 	<Line: 11-11>
                factor : CONST_INT 	<Line: 11-11>
                 CONST_INT : 3	<Line: 11>
          SEMICOLON : ;	<Line: 11>
       non-terminal : statement	<Line: 0>
      statement : RETURN expression SEMICOLON 	<Line: 13-13>
       RETURN : return	<Line: 13>
       expression : logic_expression 	<Line: 13-13>
        logic_expression : rel_expression 	<Line: 13-13>
         rel_expression : simple_expression 	<Line: 13-13>
          simple_expression : term 	<Line: 13-13>
           term : unary_expression 	<Line: 13-13>
            unary_expression : factor 	<Line: 13-13>
             factor : CONST_INT 	<Line: 13-13>
              CONST_INT : 0	<Line: 13>
       SEMICOLON : ;	<Line: 13>
     RCURL : }	<Line: 15>
