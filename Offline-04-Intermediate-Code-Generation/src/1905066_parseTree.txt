start : program 	<Line: 3-19>
 program : unit 	<Line: 3-19>
  unit : func_definition 	<Line: 3-19>
   func_definition : type_specifier ID LPAREN RPAREN compound_statement 	<Line: 3-19>
    type_specifier : INT 	<Line: 3-3>
     INT : int	<Line: 3>
    ID : main	<Line: 3>
    LPAREN : (	<Line: 3>
    RPAREN : )	<Line: 3>
    compound_statement : LCURL statements RCURL 	<Line: 4-19>
     LCURL : {	<Line: 4>
     statements : statements statement 	<Line: 5-17>
      statements : statements statement 	<Line: 5-16>
       statements : statements statement 	<Line: 5-14>
        statements : statements statement 	<Line: 5-13>
         statements : statements statement 	<Line: 5-12>
          statements : statements statement 	<Line: 5-11>
           statements : statements statement 	<Line: 5-9>
            statements : statements statement 	<Line: 5-8>
             statements : statements statement 	<Line: 5-7>
              statements : statement 	<Line: 5-5>
               statement : var_declaration 	<Line: 5-5>
                var_declaration : type_specifier declaration_list SEMICOLON 	<Line: 5-5>
                 type_specifier : INT 	<Line: 5-5>
                  INT : int	<Line: 5>
                 declaration_list : declaration_list COMMA ID 	<Line: 5-5>
                  declaration_list : declaration_list COMMA ID 	<Line: 5-5>
                   declaration_list : declaration_list COMMA ID 	<Line: 5-5>
                    declaration_list : ID LSQUARE CONST_INT RSQUARE 	<Line: 5-5>
                     ID : ara	<Line: 5>
                     LSQUARE : [	<Line: 5>
                     CONST_INT : 5	<Line: 5>
                     RSQUARE : ]	<Line: 5>
                    COMMA : ,	<Line: 5>
                    ID : i	<Line: 5>
                   COMMA : ,	<Line: 5>
                   ID : j	<Line: 5>
                  COMMA : ,	<Line: 5>
                  ID : k	<Line: 5>
                 SEMICOLON : ;	<Line: 5>
              statement : expression_statement 	<Line: 7-7>
               expression_statement : expression SEMICOLON 	<Line: 7-7>
                expression : variable ASSIGNOP logic_expression 	<Line: 7-7>
                 variable : ID 	<Line: 7-7>
                  ID : j	<Line: 7>
                 ASSIGNOP : =	<Line: 7>
                 logic_expression : rel_expression 	<Line: 7-7>
                  rel_expression : simple_expression 	<Line: 7-7>
                   simple_expression : term 	<Line: 7-7>
                    term : unary_expression 	<Line: 7-7>
                     unary_expression : factor 	<Line: 7-7>
                      factor : CONST_INT 	<Line: 7-7>
                       CONST_INT : 13	<Line: 7>
                SEMICOLON : ;	<Line: 7>
             statement : expression_statement 	<Line: 8-8>
              expression_statement : expression SEMICOLON 	<Line: 8-8>
               expression : variable ASSIGNOP logic_expression 	<Line: 8-8>
                variable : ID 	<Line: 8-8>
                 ID : k	<Line: 8>
                ASSIGNOP : =	<Line: 8>
                logic_expression : rel_expression 	<Line: 8-8>
                 rel_expression : simple_expression 	<Line: 8-8>
                  simple_expression : simple_expression ADDOP term 	<Line: 8-8>
                   simple_expression : term 	<Line: 8-8>
                    term : unary_expression 	<Line: 8-8>
                     unary_expression : factor 	<Line: 8-8>
                      factor : variable 	<Line: 8-8>
                       variable : ID 	<Line: 8-8>
                        ID : j	<Line: 8>
                   ADDOP : -	<Line: 8>
                   term : unary_expression 	<Line: 8-8>
                    unary_expression : factor 	<Line: 8-8>
                     factor : CONST_INT 	<Line: 8-8>
                      CONST_INT : 12	<Line: 8>
               SEMICOLON : ;	<Line: 8>
            statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 9-9>
             PRINTLN : println	<Line: 9>
             LPAREN : (	<Line: 9>
             ID : k	<Line: 9>
             RPAREN : )	<Line: 9>
             SEMICOLON : ;	<Line: 9>
           statement : expression_statement 	<Line: 11-11>
            expression_statement : expression SEMICOLON 	<Line: 11-11>
             expression : variable ASSIGNOP logic_expression 	<Line: 11-11>
              variable : ID LSQUARE expression RSQUARE 	<Line: 11-11>
               ID : ara	<Line: 11>
               LSQUARE : [	<Line: 11>
               expression : logic_expression 	<Line: 11-11>
                logic_expression : rel_expression 	<Line: 11-11>
                 rel_expression : simple_expression 	<Line: 11-11>
                  simple_expression : simple_expression ADDOP term 	<Line: 11-11>
                   simple_expression : term 	<Line: 11-11>
                    term : unary_expression 	<Line: 11-11>
                     unary_expression : factor 	<Line: 11-11>
                      factor : variable 	<Line: 11-11>
                       variable : ID 	<Line: 11-11>
                        ID : j	<Line: 11>
                   ADDOP : -	<Line: 11>
                   term : unary_expression 	<Line: 11-11>
                    unary_expression : factor 	<Line: 11-11>
                     factor : CONST_INT 	<Line: 11-11>
                      CONST_INT : 12	<Line: 11>
               RSQUARE : ]	<Line: 11>
              ASSIGNOP : =	<Line: 11>
              logic_expression : rel_expression 	<Line: 11-11>
               rel_expression : simple_expression 	<Line: 11-11>
                simple_expression : term 	<Line: 11-11>
                 term : unary_expression 	<Line: 11-11>
                  unary_expression : factor 	<Line: 11-11>
                   factor : CONST_INT 	<Line: 11-11>
                    CONST_INT : 10	<Line: 11>
             SEMICOLON : ;	<Line: 11>
          statement : expression_statement 	<Line: 12-12>
           expression_statement : expression SEMICOLON 	<Line: 12-12>
            expression : variable ASSIGNOP logic_expression 	<Line: 12-12>
             variable : ID 	<Line: 12-12>
              ID : i	<Line: 12>
             ASSIGNOP : =	<Line: 12>
             logic_expression : rel_expression 	<Line: 12-12>
              rel_expression : simple_expression 	<Line: 12-12>
               simple_expression : term 	<Line: 12-12>
                term : unary_expression 	<Line: 12-12>
                 unary_expression : factor 	<Line: 12-12>
                  factor : CONST_INT 	<Line: 12-12>
                   CONST_INT : 5	<Line: 12>
            SEMICOLON : ;	<Line: 12>
         statement : expression_statement 	<Line: 13-13>
          expression_statement : expression SEMICOLON 	<Line: 13-13>
           expression : variable ASSIGNOP logic_expression 	<Line: 13-13>
            variable : ID 	<Line: 13-13>
             ID : k	<Line: 13>
            ASSIGNOP : =	<Line: 13>
            logic_expression : rel_expression 	<Line: 13-13>
             rel_expression : simple_expression 	<Line: 13-13>
              simple_expression : simple_expression ADDOP term 	<Line: 13-13>
               simple_expression : term 	<Line: 13-13>
                term : term MULOP unary_expression 	<Line: 13-13>
                 term : unary_expression 	<Line: 13-13>
                  unary_expression : factor 	<Line: 13-13>
                   factor : variable 	<Line: 13-13>
                    variable : ID 	<Line: 13-13>
                     ID : j	<Line: 13>
                 MULOP : *	<Line: 13>
                 unary_expression : factor 	<Line: 13-13>
                  factor : CONST_INT 	<Line: 13-13>
                   CONST_INT : 2	<Line: 13>
               ADDOP : -	<Line: 13>
               term : term MULOP unary_expression 	<Line: 13-13>
                term : unary_expression 	<Line: 13-13>
                 unary_expression : factor 	<Line: 13-13>
                  factor : CONST_INT 	<Line: 13-13>
                   CONST_INT : 5	<Line: 13>
                MULOP : *	<Line: 13>
                unary_expression : factor 	<Line: 13-13>
                 factor : variable 	<Line: 13-13>
                  variable : ID 	<Line: 13-13>
                   ID : i	<Line: 13>
           SEMICOLON : ;	<Line: 13>
        statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 14-14>
         PRINTLN : println	<Line: 14>
         LPAREN : (	<Line: 14>
         ID : k	<Line: 14>
         RPAREN : )	<Line: 14>
         SEMICOLON : ;	<Line: 14>
       statement : expression_statement 	<Line: 16-16>
        expression_statement : expression SEMICOLON 	<Line: 16-16>
         expression : variable ASSIGNOP logic_expression 	<Line: 16-16>
          variable : ID 	<Line: 16-16>
           ID : i	<Line: 16>
          ASSIGNOP : =	<Line: 16>
          logic_expression : rel_expression 	<Line: 16-16>
           rel_expression : simple_expression 	<Line: 16-16>
            simple_expression : term 	<Line: 16-16>
             term : unary_expression 	<Line: 16-16>
              unary_expression : factor 	<Line: 16-16>
               factor : variable 	<Line: 16-16>
                variable : ID LSQUARE expression RSQUARE 	<Line: 16-16>
                 ID : ara	<Line: 16>
                 LSQUARE : [	<Line: 16>
                 expression : logic_expression 	<Line: 16-16>
                  logic_expression : rel_expression 	<Line: 16-16>
                   rel_expression : simple_expression 	<Line: 16-16>
                    simple_expression : simple_expression ADDOP term 	<Line: 16-16>
                     simple_expression : term 	<Line: 16-16>
                      term : term MULOP unary_expression 	<Line: 16-16>
                       term : unary_expression 	<Line: 16-16>
                        unary_expression : factor 	<Line: 16-16>
                         factor : variable 	<Line: 16-16>
                          variable : ID 	<Line: 16-16>
                           ID : j	<Line: 16>
                       MULOP : *	<Line: 16>
                       unary_expression : factor 	<Line: 16-16>
                        factor : CONST_INT 	<Line: 16-16>
                         CONST_INT : 2	<Line: 16>
                     ADDOP : -	<Line: 16>
                     term : term MULOP unary_expression 	<Line: 16-16>
                      term : unary_expression 	<Line: 16-16>
                       unary_expression : factor 	<Line: 16-16>
                        factor : CONST_INT 	<Line: 16-16>
                         CONST_INT : 5	<Line: 16>
                      MULOP : *	<Line: 16>
                      unary_expression : factor 	<Line: 16-16>
                       factor : variable 	<Line: 16-16>
                        variable : ID 	<Line: 16-16>
                         ID : i	<Line: 16>
                 RSQUARE : ]	<Line: 16>
         SEMICOLON : ;	<Line: 16>
      statement : PRINTLN LPAREN ID RPAREN SEMICOLON 	<Line: 17-17>
       PRINTLN : println	<Line: 17>
       LPAREN : (	<Line: 17>
       ID : i	<Line: 17>
       RPAREN : )	<Line: 17>
       SEMICOLON : ;	<Line: 17>
     RCURL : }	<Line: 19>
